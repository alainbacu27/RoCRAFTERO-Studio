<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="Workspace" referent="RBX0">
		<Properties>
			<Ref name="CurrentCamera">RBX1</Ref>
			<double name="DistributedGameTime">0</double>
			<CoordinateFrame name="ModelInPrimary">
				<X>0</X>
				<Y>0</Y>
				<Z>0</Z>
				<R00>1</R00>
				<R01>0</R01>
				<R02>0</R02>
				<R10>0</R10>
				<R11>1</R11>
				<R12>0</R12>
				<R20>0</R20>
				<R21>0</R21>
				<R22>1</R22>
			</CoordinateFrame>
			<string name="Name">Workspace</string>
			<Ref name="PrimaryPart">null</Ref>
			<bool name="archivable">true</bool>
		</Properties>
		<Item class="Camera" referent="RBX1">
			<Properties>
				<Ref name="CameraSubject">null</Ref>
				<token name="CameraType">0</token>
				<CoordinateFrame name="CoordinateFrame">
					<X>-82.7897034</X>
					<Y>40.8556862</Y>
					<Z>-112.654999</Z>
					<R00>-0.967570305</R00>
					<R01>0.0901667327</R01>
					<R02>-0.235961229</R02>
					<R10>-0</R10>
					<R11>0.934122801</R11>
					<R12>0.356951833</R12>
					<R20>0.252601951</R20>
					<R21>0.345375985</R21>
					<R22>-0.903829455</R22>
				</CoordinateFrame>
				<CoordinateFrame name="Focus">
					<X>-78.0704803</X>
					<Y>33.7166519</Y>
					<Z>-94.5784149</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<string name="Name">Camera</string>
				<bool name="archivable">true</bool>
			</Properties>
		</Item>
		<Item class="Part" referent="RBX2">
			<Properties>
				<bool name="Anchored">true</bool>
				<float name="BackParamA">-0.5</float>
				<float name="BackParamB">0.5</float>
				<token name="BackSurface">0</token>
				<token name="BackSurfaceInput">0</token>
				<float name="BottomParamA">-0.5</float>
				<float name="BottomParamB">0.5</float>
				<token name="BottomSurface">4</token>
				<token name="BottomSurfaceInput">0</token>
				<int name="BrickColor">37</int>
				<CoordinateFrame name="CFrame">
					<X>0</X>
					<Y>0.5</Y>
					<Z>0</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<bool name="CanCollide">true</bool>
				<bool name="DraggingV1">false</bool>
				<float name="Elasticity">0.5</float>
				<token name="FormFactor">1</token>
				<float name="Friction">0.300000012</float>
				<float name="FrontParamA">-0.5</float>
				<float name="FrontParamB">0.5</float>
				<token name="FrontSurface">0</token>
				<token name="FrontSurfaceInput">0</token>
				<float name="LeftParamA">-0.5</float>
				<float name="LeftParamB">0.5</float>
				<token name="LeftSurface">0</token>
				<token name="LeftSurfaceInput">0</token>
				<bool name="Locked">true</bool>
				<token name="Material">256</token>
				<string name="Name">Base</string>
				<float name="Reflectance">0</float>
				<float name="RightParamA">-0.5</float>
				<float name="RightParamB">0.5</float>
				<token name="RightSurface">0</token>
				<token name="RightSurfaceInput">0</token>
				<Vector3 name="RotVelocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<float name="TopParamA">-0.5</float>
				<float name="TopParamB">0.5</float>
				<token name="TopSurface">3</token>
				<token name="TopSurfaceInput">0</token>
				<float name="Transparency">0</float>
				<Vector3 name="Velocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<bool name="archivable">true</bool>
				<token name="shape">1</token>
				<Vector3 name="size">
					<X>512</X>
					<Y>1</Y>
					<Z>512</Z>
				</Vector3>
			</Properties>
		</Item>
		<Item class="Script" referent="RBX3">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">TinySB</string>
				<ProtectedString name="Source">script.Parent = nil
local Script = script.Script
local LocalScript = script.LocalScript

version = &quot;4.0.15&quot;;

local Screen = Instance.new(&quot;ScreenGui&quot;)
	Screen.Name = &quot;SBGUI&quot;
	local List = Instance.new(&quot;Frame&quot;)
		List.Name = &quot;List&quot;
		List.BackgroundTransparency = 1
		List.Size = UDim2.new(0,120,0,14)
		List.Position = UDim2.new(0,0,1,0)
		List.Parent = Screen
		local Title = Instance.new(&quot;TextLabel&quot;)
			Title.Name = &quot;Title&quot;
			Title.Text = &quot;Scripts:&quot;
			Title.BackgroundColor3 = Color3.new(0,0,0)
			Title.BorderColor3 = Color3.new(0,0,0)
			Title.TextColor3 = Color3.new(1,1,1)
			Title.Size = UDim2.new(1,0,1,0)
			Title.Parent = List
	local Menus = Instance.new(&quot;Frame&quot;)
		Menus.Name = &quot;Menus&quot;
		Menus.BackgroundTransparency = 1
		Menus.BorderSizePixel = 0
		Menus.BackgroundColor3 = Color3.new()
		Menus.BorderColor3 = Color3.new()
		Menus.Size = UDim2.new(1,0,1,0)
		Menus.Parent = Screen
local Label = Instance.new(&quot;TextLabel&quot;)
	Label.BackgroundColor3 = Color3.new(1,1,1)
	Label.BorderColor3 = Color3.new(1,1,1)
	Label.TextColor3 = Color3.new(0,0,0)
	Label.Size = UDim2.new(1,0,1,0)

function Output(player,time,msg)
	local pgui = player:FindFirstChild(&quot;PlayerGui&quot;)
	if pgui then
		local desk = desk[player]
		local output = desk.output
		desk.last_msg = tick()
		output.Text = msg
		output.Parent = pgui
		if time &gt;= 0 then
			wait(time)
			if tick() + 0.05 - desk.last_msg &gt;= time then
				output.Parent = nil
			end
		end
	end
end

function GetLines(source)
	local lines = {}
	for line in source:gmatch(&quot;[^\r\n]+&quot;) do
		table.insert(lines,line)
	end
	return lines
end

desk = {}
topics = {
	Main = {
		[&quot;create&quot;]	= [[&quot;create/(name)/local&quot; Creates a new script named (name). Adding &quot;/local&quot; after creates a LocalScript instead.]];
		[&quot;edit&quot;]	= [[&quot;edit/(name)&quot; Enters edit mode with (name). Anything chatted (except commands) will be added to the script&apos;s source.]];
		[&quot;run&quot;]		= [[&quot;run/(name)&quot; Puts (name) in the workspace so that it runs.]];
		[&quot;stop&quot;]	= [[&quot;stop/(name)&quot; Removes (name) from the workspace.]];
		[&quot;remove&quot;]	= [[&quot;remove/(name)&quot; Deletes (name) from your list of scripts.]];
		[&quot;help&quot;]	= [[&quot;help/(command)&quot; Displays help for (command).]];
		[&quot;gui&quot;]		= [[&quot;gui/&quot; Toggles the visibility of your SB GUI. This will also protect it from being modified.]];
	};
	Edit = {
		[&quot;append&quot;]	= [[&quot;append/(text)&quot; Adds (text) to the script&apos;s source.]];
		[&quot;insert&quot;]	= [[&quot;insert/(line)/(text)&quot; Inserts (text) at the (line)th line.]];
		[&quot;replace&quot;]	= [[&quot;replace/(line)/(text)&quot; Replaces the (line)th line with (text).]];
		[&quot;remove&quot;]	= [[&quot;remove/(line)&quot; Removes the (line)th line.]];
		[&quot;recall&quot;]	= [[&quot;recall/(line)&quot; Displays the (line)th line.]];
		[&quot;clear&quot;]	= [[&quot;clear/&quot; Clears the script&apos;s source.]];
		[&quot;exit&quot;]	= [[&quot;exit/&quot; Exits edit mode.]];
		[&quot;help&quot;]	= [[&quot;help/(command)&quot; Displays help for (command).]];
	};
}
command = {
	Main = {
		[&quot;create&quot;] = function(player,name,type)
			if not name or name:match(&quot;%W&quot;) then Output(player,5,&quot;ERROR:  Invalid argument&quot;) return end
			local desk = desk[player]
			if not desk.scripts[name] then
				local script = (type == &quot;local&quot; and LocalScript or Script):Clone()
				script.Name = name
				local Screen = desk.screen
				local Label = Label:Clone()
				Label.Name = name
				Label.Text = name
				Label.Parent = Screen.List
				table.insert(desk.list,Label)
				desk.scripts[name] = {
					script = script;
					name = name;
					source = script.DSource;
					display = Label;
					running = false;
				}
				UpdateList(desk.list,Screen.List)
				Output(player,1,&quot;Created &quot; .. script.className .. &quot; (&quot;..name..&quot;)&quot;)
			else
				Output(player,5,&quot;ERROR:  Script (&quot;..name..&quot;) already exists&quot;)
			end
		end;
		[&quot;edit&quot;] = function(player,name)
			if not name or name:match(&quot;%W&quot;) then Output(player,5,&quot;ERROR:  Invalid argument&quot;) return end
			local desk = desk[player]
			local set = desk.scripts[name]
			if set then
				desk.editing = set
				desk.mode = &quot;Edit&quot;
				SwitchMenus(desk.menus,desk.mode)
				set.display.BackgroundColor3 = Color3.new(1,0.8,0)
				Output(player,1,&quot;Editing (&quot;..name..&quot;)&quot;)
			else
				Output(player,5,&quot;ERROR:  Script (&quot;..name..&quot;) does not exist&quot;)
			end
		end;
		[&quot;run&quot;] = function(player,name)
			if not name or name:match(&quot;%W&quot;) then Output(player,5,&quot;ERROR:  Invalid argument&quot;) return end
			local set = desk[player].scripts[name]
			if set then
				local script = set.script
				set.source.Parent = script
				set.script.Name = name
				set.running = true
				script.Parent = nil
				script.Parent = script.className == &quot;LocalScript&quot; and player.Backpack or workspace
				set.display.BackgroundColor3 = Color3.new(0,0.8,0)
				Output(player,1,&quot;Running (&quot;..name..&quot;)&quot;)
			else
				Output(player,5,&quot;ERROR:  Script (&quot;..name..&quot;) does not exist&quot;)
			end
		end;
		[&quot;stop&quot;] = function(player,name)
			if not name or name:match(&quot;%W&quot;) then Output(player,5,&quot;ERROR:  Invalid argument&quot;) return end
			local set = desk[player].scripts[name]
			if set then
				set.script.Parent = nil
				set.running = false
				set.display.BackgroundColor3 = Color3.new(1,1,1)
				Output(player,1,&quot;Stopped (&quot;..name..&quot;)&quot;)
			else
				Output(player,5,&quot;ERROR:  Script (&quot;..name..&quot;) does not exist&quot;)
			end
		end;
		[&quot;remove&quot;] = function(player,name)
			if not name or name:match(&quot;%W&quot;) then Output(player,5,&quot;ERROR:  Invalid argument&quot;) return end
			local desk = desk[player]
			local set = desk.scripts[name]
			if set then
				set.script:Remove()
				for i,v in pairs(desk.list) do
					if v.Name == name then
						v:Remove()
						table.remove(desk.list,i)
						break
					end
				end
				desk.scripts[name] = nil
				UpdateList(desk.list,desk.screen.List)
				Output(player,1,&quot;Removed (&quot;..name..&quot;)&quot;)
			else
				Output(player,5,&quot;ERROR:  Script (&quot;..name..&quot;) does not exist&quot;)
			end
		end;
		[&quot;help&quot;] = function(player,topic)
			local content = topics[&quot;Main&quot;][topic]
			if content then
				Output(player,-1,content)
			elseif command[&quot;Main&quot;][topic] then
				Output(player,-1,[[There are no help topics for this command.]])
			else
				Output(player,-1,[[Type &quot;help/(command)&quot; to learn about a command.]])
			end
		end;
		[&quot;gui&quot;] = function(player)
			local desk = desk[player]
			desk.gui_on = not desk.gui_on
			desk.screen.Parent = desk.gui_on and desk.playergui or nil
		end;
	};
	Edit = {
		[&quot;append&quot;] = function(player,text)
			local set = desk[player].editing
			local source = set.source
			source.Value = source.Value .. text .. &quot;\n&quot;
			Output(player,1,&quot;Appended text&quot;)
		end;
		[&quot;insert&quot;] = function(player,line,text)
			line = tonumber(line)
			if not line then Output(player,5,&quot;ERROR:  Invalid argument&quot;) return end
			local set = desk[player].editing
			local source = set.source
			local lines = GetLines(source.Value)
			if #lines &gt; 0 then
				line = line &gt; #lines and #lines+1 or line &lt; 1 and 1 or line
				table.insert(lines,line,text)
				source.Value = table.concat(lines,&quot;\n&quot;) .. &quot;\n&quot;
				Output(player,1,&quot;Inserted to line &quot; .. line)
			else
				Output(player,5,&quot;ERROR:  Script is empty&quot;)
			end
		end;
		[&quot;replace&quot;] = function(player,line,text)
			line = tonumber(line)
			if not line then Output(player,5,&quot;ERROR:  Invalid argument&quot;) return end
			local set = desk[player].editing
			local source = set.source
			local lines = GetLines(source.Value)
			if #lines &gt; 0 then
				line = line &gt; #lines and #lines or line &lt; 1 and 1 or line
				lines[line] = text
				source.Value = table.concat(lines,&quot;\n&quot;) .. &quot;\n&quot;
				Output(player,1,&quot;Replaced line &quot; .. line)
			else
				Output(player,5,&quot;ERROR:  Script is empty&quot;)
			end
		end;
		[&quot;remove&quot;] = function(player,line)
			line = tonumber(line)
			if not line then Output(player,5,&quot;ERROR:  Invalid argument&quot;) return end
			local set = desk[player].editing
			local source = set.source
			local lines = GetLines(source.Value)
			if #lines &gt; 0 then
				line = line &gt; #lines and #lines or line &lt; 1 and 1 or line
				table.remove(lines,line)
				source.Value = table.concat(lines,&quot;\n&quot;) .. &quot;\n&quot;
				Output(player,1,&quot;Removed line &quot; .. line)
			else
				Output(player,5,&quot;ERROR:  Script is empty&quot;)
			end
		end;
		[&quot;recall&quot;] = function(player,line)
			line = tonumber(line)
			if not line then Output(player,5,&quot;ERROR:  Invalid argument&quot;) return end
			local set = desk[player].editing
			local lines = GetLines(set.source.Value)
			if #lines &gt; 0 then
				line = line &gt; #lines and #lines or line &lt; 1 and 1 or line
				Output(player,-1,set.name..&quot;:&quot;..line..&quot;:  &quot;..lines[line])
			else
				Output(player,5,&quot;ERROR:  Script is empty&quot;)
			end
		end;
		[&quot;clear&quot;] = function(player)
			desk[player].editing.source.Value = &quot;&quot;
			Output(player,1,&quot;Cleared source&quot;)
		end;
		[&quot;exit&quot;] = function(player)
			local desk = desk[player]
			local set = desk.editing
			local name = set.name
			desk.editing = nil
			desk.mode = &quot;Main&quot;
			SwitchMenus(desk.menus,desk.mode)
			set.display.BackgroundColor3 = set.running and Color3.new(0,0.8,0) or Color3.new(1,1,1)
			Output(player,1,&quot;Exited (&quot;..name..&quot;)&quot;)
		end;
		[&quot;help&quot;] = function(player,topic)
			local content = topics[&quot;Edit&quot;][topic]
			if content then
				Output(player,-1,content)
			elseif command[&quot;Edit&quot;][topic] then
				Output(player,-1,[[There are no help topics for this command.]])
			else
				Output(player,-1,[[Type &quot;help/(command)&quot; to learn about a command.]])
			end
		end;
	};
}

for name,cmds in pairs(command) do
	local frame = Instance.new(&quot;Frame&quot;)
	frame.BackgroundColor3 = Color3.new(1,1,1)
	frame.BorderColor3 = Color3.new(0,0,0)
	frame.Visible = false
	frame.Name = name
	local i = 1
	local label = Instance.new(&quot;TextLabel&quot;)
	label.Name = &quot;Title&quot;
	label.Text = name ..&quot; Commands:&quot;
	label.BackgroundColor3 = Color3.new(0,0,0)
	label.BorderColor3 = Color3.new(0,0,0)
	label.TextColor3 = Color3.new(1,1,1)
	label.Parent = frame
	for name in pairs(cmds) do
		local label = label:Clone()
		label.Text = name
		label.BackgroundTransparency = 1
		label.TextColor3 = Color3.new(0,0,0)
		label.Parent = frame
		i = i + 1
	end
	frame.Size = UDim2.new(0,100,0,16*i)
	frame.Position = UDim2.new(0,1,0.94,-16*i)
	for n,v in pairs(frame:GetChildren()) do
		v.Size = UDim2.new(1,0,1/i,0)
		v.Position = UDim2.new(0,0,(n-1)/i,0)
	end
	frame.Parent = Menus
	if frame.Position.Y.Offset &lt; List.Position.Y.Offset + 2 then
		List.Position = UDim2.new(0,0,0.94,frame.Position.Y.Offset - 2)
	end
end

function UpdateList(list,parent)
	for i,label in pairs(list) do
		label.Parent = parent
		label.Position = UDim2.new(0,0,-i,0)
	end
	parent.Title.Position = UDim2.new(0,0,-#list-1,0)
end

function SwitchMenus(set,mode)
	for i,v in pairs(set:GetChildren()) do
		v.Visible = v.Name == mode
	end
end

function CharacterAdded(player)
	local Screen = Screen:Clone()
	local desk = desk[player]
	desk.screen = Screen
	desk.menus = Screen.Menus
	desk.playergui = player.PlayerGui
	Screen.Parent = desk.gui_on and desk.playergui or nil
	SwitchMenus(desk.menus,desk.mode)
	UpdateList(desk.list,Screen.List)
end

function Chatted(player,msg)
	local args = {}
	local mode = desk[player].mode
	local command = command[mode]
	local cmd = command[msg:match(&quot;(%w+)/&quot;)]
	if cmd then
		for arg in msg:gmatch(&quot;/([^/]+)&quot;) do
			table.insert(args,arg)
		end
		cmd(player,unpack(args))
	elseif mode == &quot;Edit&quot; then
		command.append(player,msg)
	end
end

game.Players.PlayerAdded:connect(function(player)
	local Output = Instance.new(&quot;Hint&quot;)
	Output.Name = &quot;DisplayOutput&quot;
	desk[player] = {
		mode	= &quot;Main&quot;;
		scripts	= {};
		editing	= nil;
		gui_on	= true;
		screen	= nil;
		menus	= nil;
		playergui	= nil;
		list		= {};
		output	= Output;
		last_msg	= tick();
	}
	player.Chatted:connect(function(msg) Chatted(player,msg) end)
	player.CharacterAdded:connect(function() CharacterAdded(player) end)
end)</ProtectedString>
				<bool name="archivable">true</bool>
			</Properties>
			<Item class="Script" referent="RBX4">
				<Properties>
					<bool name="Disabled">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Script</string>
					<ProtectedString name="Source">loadstring(script.DSource.Value)()</ProtectedString>
					<bool name="archivable">true</bool>
				</Properties>
				<Item class="StringValue" referent="RBX5">
					<Properties>
						<string name="Name">DSource</string>
						<string name="Value"></string>
						<bool name="archivable">true</bool>
					</Properties>
				</Item>
			</Item>
			<Item class="LocalScript" referent="RBX6">
				<Properties>
					<bool name="Disabled">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">LocalScript</string>
					<ProtectedString name="Source">wait();loadstring(script.DSource.Value)()</ProtectedString>
					<bool name="archivable">true</bool>
				</Properties>
				<Item class="StringValue" referent="RBX7">
					<Properties>
						<string name="Name">DSource</string>
						<string name="Value"></string>
						<bool name="archivable">true</bool>
					</Properties>
				</Item>
			</Item>
		</Item>
	</Item>
	<Item class="RunService" referent="RBX8">
		<Properties>
			<string name="Name">Run Service</string>
			<bool name="archivable">true</bool>
		</Properties>
	</Item>
	<External>RBX9</External>
	<External>RBX10</External>
	<Item class="ContentProvider" referent="RBX11">
		<Properties>
			<string name="Name">Instance</string>
			<bool name="archivable">true</bool>
		</Properties>
	</Item>
	<Item class="ContentFilter" referent="RBX12">
		<Properties>
			<string name="Name">ContentFilter</string>
			<bool name="archivable">true</bool>
		</Properties>
	</Item>
	<Item class="KeyframeSequenceProvider" referent="RBX13">
		<Properties>
			<string name="Name">Instance</string>
			<bool name="archivable">true</bool>
		</Properties>
	</Item>
	<Item class="GuiService" referent="RBX14">
		<Properties>
			<string name="Name">GuiService</string>
			<bool name="archivable">true</bool>
		</Properties>
	</Item>
	<Item class="Players" referent="RBX15">
		<Properties>
			<int name="MaxPlayers">12</int>
			<string name="Name">Players</string>
			<bool name="archivable">true</bool>
		</Properties>
	</Item>
	<Item class="StarterPack" referent="RBX16">
		<Properties>
			<string name="Name">StarterPack</string>
			<bool name="archivable">true</bool>
		</Properties>
	</Item>
	<Item class="StarterGui" referent="RBX17">
		<Properties>
			<string name="Name">StarterGui</string>
			<bool name="ShowDevelopmentGui">true</bool>
			<bool name="archivable">true</bool>
		</Properties>
	</Item>
	<Item class="SoundService" referent="RBX18">
		<Properties>
			<token name="AmbientReverb">0</token>
			<float name="DistanceFactor">10</float>
			<float name="DopplerScale">1</float>
			<string name="Name">Soundscape</string>
			<float name="RolloffScale">1</float>
			<bool name="archivable">true</bool>
		</Properties>
		<External>RBX19</External>
		<External>RBX20</External>
		<External>RBX21</External>
		<External>RBX22</External>
		<External>RBX23</External>
		<External>RBX24</External>
		<External>RBX25</External>
		<External>RBX26</External>
		<External>RBX27</External>
		<External>RBX28</External>
		<External>RBX29</External>
		<External>RBX30</External>
		<External>RBX31</External>
		<External>RBX32</External>
	</Item>
	<Item class="PhysicsService" referent="RBX33">
		<Properties>
			<string name="Name">PhysicsService</string>
			<bool name="archivable">true</bool>
		</Properties>
	</Item>
	<Item class="BadgeService" referent="RBX34">
		<Properties>
			<string name="Name">BadgeService</string>
			<bool name="archivable">true</bool>
		</Properties>
	</Item>
	<Item class="Geometry" referent="RBX35">
		<Properties>
			<string name="Name">Geometry</string>
			<bool name="archivable">true</bool>
		</Properties>
	</Item>
	<External>RBX36</External>
	<Item class="Debris" referent="RBX37">
		<Properties>
			<int name="MaxItems">1000</int>
			<string name="Name">Debris</string>
			<bool name="archivable">true</bool>
		</Properties>
	</Item>
	<Item class="Timer" referent="RBX38">
		<Properties>
			<string name="Name">Instance</string>
			<bool name="archivable">true</bool>
		</Properties>
	</Item>
	<Item class="ScriptInformationProvider" referent="RBX39">
		<Properties>
			<string name="Name">Instance</string>
			<bool name="archivable">true</bool>
		</Properties>
	</Item>
	<External>RBX40</External>
	<Item class="Selection" referent="RBX41">
		<Properties>
			<string name="Name">Selection</string>
			<bool name="archivable">true</bool>
		</Properties>
	</Item>
	<External>RBX42</External>
	<Item class="CollectionService" referent="RBX43">
		<Properties>
			<string name="Name">CollectionService</string>
			<bool name="archivable">true</bool>
		</Properties>
	</Item>
	<Item class="ChangeHistoryService" referent="RBX44">
		<Properties>
			<string name="Name">ChangeHistoryService</string>
			<bool name="archivable">true</bool>
		</Properties>
	</Item>
	<Item class="Lighting" referent="RBX45">
		<Properties>
			<Color3 name="Ambient">4289045925</Color3>
			<float name="Brightness">1</float>
			<Color3 name="ColorShift_Bottom">4278190080</Color3>
			<Color3 name="ColorShift_Top">4278190080</Color3>
			<float name="GeographicLatitude">41.7332993</float>
			<string name="Name">Lighting</string>
			<Color3 name="ShadowColor">4290361790</Color3>
			<string name="TimeOfDay">14:00:00</string>
			<bool name="archivable">true</bool>
		</Properties>
	</Item>
	<External>RBX46</External>
</roblox>